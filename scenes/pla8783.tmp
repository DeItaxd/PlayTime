[gd_scene load_steps=11 format=3 uid="uid://d0bbllal0am4n"]

[ext_resource type="Shader" path="res://shaders/outline.gdshader" id="1_66tcc"]
[ext_resource type="PackedScene" uid="uid://g0l2m41tjiug" path="res://scenes/mp5.tscn" id="2_bt05m"]
[ext_resource type="Texture2D" uid="uid://ck78u4nsdekvb" path="res://images/crosshair.png" id="3_f1pg7"]

[sub_resource type="GDScript" id="GDScript_847hh"]
resource_name = "movement"
script/source = "extends CharacterBody3D

var speed
const WALK_SPEED = 2.0
const SPRINT_SPEED = 3.0
const JUMP_VELOCITY = 2.5
const SENSITIVITY = 0.03
var push_force = 1.0

#bob variables
const BOB_FREQ = 5.0
const BOB_AMP = 0.03
var t_bob = 0.0

#fov variables
const BASE_FOV = 75.0
const FOV_CHANGE = 1.5

#gun variables
var aiming = false
var weapon_sway_amount = 5.0
var weapon_rotation_sway = -0.05
var weapon_rotation_amount = 0.2
var def_weapon_pos : Vector3
var cam_rotation_amount = 0.1
var mouse_input : Vector2
var allowed_to_sway = true

# Get the gravity from the project settings to be synced with RigidBody nodes.
var gravity = 9.8

var bullet = load(\"res://scenes/Bullet.tscn\")
var instance

@onready var head = $Head
@onready var camera = $Head/Camera3D
@onready var gun_anim = $Head/Camera3D/mp5/AnimationPlayer
@onready var gun_barrel = $Head/Camera3D/mp5/RayCast3D
@onready var aim_anim = $AnimationPlayer
@onready var crosshair = $CanvasLayer/Crosshair
@onready var guncamera = $CanvasLayer/SubViewportContainer/SubViewport/GunCamera
@onready var gun = $Head/Camera3D/mp5

func _ready():
	Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)
	var MainEnv = camera.get_environment()
	guncamera.set_environment(MainEnv)
	def_weapon_pos = gun.position

func _unhandled_input(event):
	if event is InputEventMouseMotion:
		head.rotate_y(-event.relative.x * SENSITIVITY)
		camera.rotate_x(-event.relative.y * SENSITIVITY)
		camera.rotation.x = clamp(camera.rotation.x, deg_to_rad(-75), deg_to_rad(75))

func _input(event):
	if !camera: return
	if event is InputEventMouseMotion:
		mouse_input = event.relative

func _physics_process(delta):
	# Add the gravity.
	if not is_on_floor():
		velocity.y -= gravity * delta
	
	# Handle jump.
	if Input.is_action_just_pressed(\"jump\") and is_on_floor():
		velocity.y = JUMP_VELOCITY
	
	# Handle sprint.
	if Input.is_action_pressed(\"shift\"):
		speed = SPRINT_SPEED
	else:
		speed = WALK_SPEED
	
	# Get the input direction and handle the movement/deceleration.
	# As good practice, you should replace UI actions with custom gameplay actions.
	var input_dir = Input.get_vector(\"a\", \"d\", \"w\", \"s\")
	var direction = (head.transform.basis * Vector3(input_dir.x, 0, input_dir.y)).normalized()
	if is_on_floor():
		if direction:
			velocity.x = direction.x * speed
			velocity.z = direction.z * speed
		else:
			velocity.x = lerp(velocity.x, direction.x * speed, delta * 7.0)
		velocity.z = lerp(velocity.z, direction.z * speed, delta * 7.0)
	else:
		velocity.x = lerp(velocity.x, direction.x * speed, delta * 3.0)
		velocity.z = lerp(velocity.z, direction.z * speed, delta * 3.0)
	
	#head bob
	t_bob += delta * velocity.length() * float(is_on_floor())
	camera.transform.origin = _headbob(t_bob)
	
	# FOV
	var velocity_clamped = clamp(velocity.length(), 0.5, SPRINT_SPEED * 2)
	var target_fov = BASE_FOV + FOV_CHANGE * velocity_clamped
	camera.fov = lerp(camera.fov, target_fov, delta * 8.0)
	
	#Shooting
	if Input.is_action_pressed(\"shoot\"):
		if !gun_anim.is_playing():
			gun_anim.play(\"Shoot\")
			instance = bullet.instantiate()
			instance.position = gun_barrel.global_position
			instance.transform.basis = gun_barrel.global_transform.basis
			get_parent().add_child(instance)
	
	if Input.is_action_just_pressed(\"aim\"):
		if !aim_anim.is_playing():
			if aiming == false:
				aim_anim.play(\"Aim\")
				crosshair.visible = false
				allowed_to_sway = false
				aiming = true
			else:
				aim_anim.play(\"Unaim\")
				crosshair.visible = true
				allowed_to_sway = true
				aiming = false
	
	move_and_slide()
	cam_tilt(input_dir.x, delta)
	weapon_tilt(input_dir.x, delta)
	weapon_sway(delta)
	weapon_bob(velocity.length(),delta)
	
	for i in get_slide_collision_count():
		var c = get_slide_collision(i)
		if c.get_collider() is RigidBody3D:
			c.get_collider().apply_central_impulse(-c.get_normal() * push_force)

func cam_tilt(input_x, delta):
	if camera:
		camera.rotation.z = lerp(camera.rotation.z, -input_x * cam_rotation_amount, 10 * delta)

func weapon_tilt(input_x, delta):
	if allowed_to_sway:
		if gun:
			gun.rotation.z = lerp(gun.rotation.z, -input_x * weapon_rotation_amount, 10 * delta)

func weapon_sway(delta):
	if allowed_to_sway:
		mouse_input = lerp(mouse_input, Vector2.ZERO, 10 * delta)
		gun.rotation.x = lerp(gun.rotation.x, mouse_input.y * weapon_rotation_sway, 10 * delta)
		gun.rotation.y = lerp(gun.rotation.y, mouse_input.x * weapon_rotation_sway, 10 * delta)

func weapon_bob(vel : float, delta):
	if allowed_to_sway:
		if gun:
			if vel > 0:
				var bob_amount : float = 0.01
				var bob_freq : float = 0.01
				gun.position.y = lerp(gun.position.y, def_weapon_pos.y + sin(Time.get_ticks_msec() * bob_freq) * bob_amount, 10 * delta)
				gun.position.x = lerp(gun.position.x, def_weapon_pos.x + sin(Time.get_ticks_msec() * bob_freq * 0.5) * bob_amount, 10 * delta)
			else:
				var bob_amount : float = 0
				var bob_freq : float = 0
				gun.position.y = lerp(gun.position.y, def_weapon_pos.y, 10 * delta)
				gun.position.x = lerp(gun.position.x, def_weapon_pos.x, 10 * delta)

func _process(_delta):
	guncamera.global_transform = camera.global_transform

func _headbob(time) -> Vector3:
	var pos = Vector3.ZERO
	pos.y = sin(time * BOB_FREQ) * BOB_AMP
	pos.x = cos(time * BOB_FREQ / 2) * BOB_AMP
	return pos
"

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_u5jka"]
radius = 0.22
height = 0.9

[sub_resource type="ShaderMaterial" id="ShaderMaterial_6m4vo"]
render_priority = 0
shader = ExtResource("1_66tcc")
shader_parameter/depth_threshold = 0.05
shader_parameter/normal_threshold = 0.6
shader_parameter/darken_amount = 0.3
shader_parameter/lighten_amount = 1.5
shader_parameter/light_direction = Vector3(-0.96, -0.18, 0.2)

[sub_resource type="QuadMesh" id="QuadMesh_gp3ow"]
material = SubResource("ShaderMaterial_6m4vo")
flip_faces = true
size = Vector2(2, 2)

[sub_resource type="Animation" id="Animation_lp222"]
resource_name = "Aim"
length = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Head/Camera3D/mp5:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2),
"transitions": PackedFloat32Array(-2, -2),
"update": 0,
"values": [Vector3(0.22, -0.15, -0.883), Vector3(0, -0.1, -0.65)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Head/Camera3D/mp5:rotation")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.2),
"transitions": PackedFloat32Array(-2, -2),
"update": 0,
"values": [Vector3(0.0226893, 0.0523599, 0), Vector3(-0.0261799, 0, 0)]
}

[sub_resource type="Animation" id="Animation_q6kf6"]
resource_name = "Unaim"
length = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Head/Camera3D/mp5:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2),
"transitions": PackedFloat32Array(-2, -2),
"update": 0,
"values": [Vector3(0, -0.1, -0.65), Vector3(0.22, -0.15, -0.883)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Head/Camera3D/mp5:rotation")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.2),
"transitions": PackedFloat32Array(-2, -2),
"update": 0,
"values": [Vector3(-0.0261799, 0, 0), Vector3(0.0226893, 0.0523599, 0)]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_1ds0g"]
_data = {
"Aim": SubResource("Animation_lp222"),
"Unaim": SubResource("Animation_q6kf6")
}

[node name="Player" type="CharacterBody3D"]
script = SubResource("GDScript_847hh")

[node name="CanvasLayer" type="CanvasLayer" parent="."]

[node name="Crosshair" type="TextureRect" parent="CanvasLayer"]
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -16.0
offset_top = -16.0001
offset_right = 16.0
offset_bottom = 16.0001
grow_horizontal = 2
grow_vertical = 2
texture = ExtResource("3_f1pg7")
expand_mode = 1

[node name="SubViewportContainer" type="SubViewportContainer" parent="CanvasLayer"]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
stretch = true

[node name="SubViewport" type="SubViewport" parent="CanvasLayer/SubViewportContainer"]
transparent_bg = true
handle_input_locally = false
audio_listener_enable_3d = true
size = Vector2i(1960, 1080)
render_target_update_mode = 4

[node name="GunCamera" type="Camera3D" parent="CanvasLayer/SubViewportContainer/SubViewport"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.185817, 0)
cull_mask = 2

[node name="Bean" type="CollisionShape3D" parent="."]
shape = SubResource("CapsuleShape3D_u5jka")

[node name="Head" type="Node3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.18578, 0)

[node name="Camera3D" type="Camera3D" parent="Head"]
cull_mask = 1048573

[node name="PostProcessing" type="MeshInstance3D" parent="Head/Camera3D"]
extra_cull_margin = 16384.0
mesh = SubResource("QuadMesh_gp3ow")
skeleton = NodePath("../../../../..")

[node name="mp5" parent="Head/Camera3D" instance=ExtResource("2_bt05m")]
transform = Transform3D(0.99863, 0.00118736, 0.0523225, 0, 0.999743, -0.0226873, -0.052336, 0.0226562, 0.998372, 0.22, -0.15, -0.883)

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
libraries = {
"": SubResource("AnimationLibrary_1ds0g")
}
