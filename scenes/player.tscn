[gd_scene load_steps=20 format=3 uid="uid://d0bbllal0am4n"]

[ext_resource type="Shader" path="res://shaders/outline_real.gdshader" id="2_uy43f"]
[ext_resource type="Shader" path="res://shaders/dark_outline.gdshader" id="3_0dms5"]
[ext_resource type="AudioStream" uid="uid://u0dk0vr0813t" path="res://sounds/light_switch.mp3" id="5_ulfj6"]
[ext_resource type="Script" path="res://scenes/FootstepManager.gd" id="8_toltb"]
[ext_resource type="AudioStream" uid="uid://cwfu1mh4vxx8o" path="res://sounds/Footstep.mp3" id="9_gx2bq"]

[sub_resource type="GDScript" id="GDScript_847hh"]
resource_name = "movement"
script/source = "extends CharacterBody3D

var speed
const WALK_SPEED = 2.0
const SPRINT_SPEED = 3.0
const JUMP_VELOCITY = 2.5
const SENSITIVITY = 1
var push_force = 1.0

#bob variables
const BOB_FREQ = 5.0
const BOB_AMP = 0.03
var t_bob = 0.0

#fov variables
const BASE_FOV = 75.0
const FOV_CHANGE = 1.5

var has_light = true
var cam_rotation_amount = 0.1
var mouse_input : Vector2
var allowed_to_sway = true

#blink variables
var in_future = false

#footstep variables
var can_play : bool = true
@warning_ignore(\"unused_signal\")
signal step

# Get the gravity from the project settings to be synced with RigidBody nodes.
var gravity = 9.8

var can_timeshift = true
var tut1 = false
var tut2 = false
var tut3 = false

@onready var head = $Head
@onready var camera = $Head/Camera3D
@onready var vhs_outline = $Head/Camera3D/VHSOutline
@onready var blink_anim = $Blinkanim

func _ready():
	Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)

func _input(event):
	if event is InputEventMouseMotion:
		rotate_y(deg_to_rad(-event.relative.x * SENSITIVITY))
		head.rotate_x(deg_to_rad((-event.relative.y * SENSITIVITY)))
		head.rotation.x = clamp(head.rotation.x, deg_to_rad(-88), deg_to_rad(88))
		mouse_input = event.relative

func _physics_process(delta):
	
	# Add the gravity.
	if not is_on_floor():
		velocity.y -= gravity * delta
	
	# Handle jump.
	if Input.is_action_just_pressed(\"jump\") and is_on_floor():
		velocity.y = JUMP_VELOCITY
	
	# Handle sprint.
	if Input.is_action_pressed(\"shift\"):
		speed = SPRINT_SPEED
	else:
		speed = WALK_SPEED
	
	var input_dir = Input.get_vector(\"a\", \"d\", \"w\", \"s\")
	var forward = -camera.global_transform.basis.z
	var right = camera.global_transform.basis.x
	
	var direction = (forward * -input_dir.y + right * input_dir.x).normalized()
	direction.y = 0
	direction = direction.normalized()
	if is_on_floor():
		if direction:
			velocity.x = direction.x * speed
			velocity.z = direction.z * speed
		else:
			velocity.x = lerp(velocity.x, direction.x * speed, delta * 7.0)
			velocity.z = lerp(velocity.z, direction.z * speed, delta * 7.0)
	else:
		velocity.x = lerp(velocity.x, direction.x * speed, delta * 3.0)
		velocity.z = lerp(velocity.z, direction.z * speed, delta * 3.0)
	
	#head bob
	t_bob += delta * velocity.length() * float(is_on_floor())
	camera.transform.origin = _headbob(t_bob)
	
	# FOV
	var velocity_clamped = clamp(velocity.length(), 0.5, SPRINT_SPEED * 2)
	var target_fov = BASE_FOV + FOV_CHANGE * velocity_clamped
	camera.fov = lerp(camera.fov, target_fov, delta * 8.0)
	
	if Input.is_action_just_pressed(\"blink\"):
		blink()
	
	if Input.is_action_just_pressed(\"escape\"):
		Input.set_mouse_mode(Input.MOUSE_MODE_VISIBLE)
		get_tree().change_scene_to_file(\"res://scenes/world/menu.tscn\")
	
	if Input.is_action_just_pressed(\"light\"):
		light()
	
	move_and_slide()
	cam_tilt(input_dir.x, delta)

func cam_tilt(input_x, delta):
	if camera:
		camera.rotation.z = lerp(camera.rotation.z, -input_x * cam_rotation_amount, 10 * delta)

func _headbob(time) -> Vector3:
	var pos = Vector3.ZERO
	pos.y = sin(time * BOB_FREQ) * BOB_AMP
	pos.x = cos(time * BOB_FREQ / 2) * BOB_AMP
	
	var low_pos = BOB_AMP - 0.05
	if pos.y > -low_pos:
		can_play = true
	
	if pos.y < -low_pos and can_play:
		can_play = false
		emit_signal(\"step\")
	
	return pos

func blink():
	if !in_future and can_timeshift:
		if !tut1:
			$Head/Camera3D/TutorialText.queue_free()
			tut1 = true
		if !tut2:
			$Head/Camera3D/TutorialText2.visible = true
		blink_anim.play(\"Blink\")
		vhs_outline.visible = true
		Signals.emit_signal(\"timeshift\")
		in_future = true
		blink_anim.play(\"Unblink\")
		can_timeshift = false
		$Timeshift.start()

func light():
	if has_light:
		if !$Head/Camera3D/Light/SpotLight3D.visible:
			$Head/Camera3D/Light/Lightanim.play(\"Light\")
		else:
			$Head/Camera3D/Light/Lightanim.play(\"Unlight\")

func _on_timeshift_timeout():
	blink_anim.play(\"Blink\")
	vhs_outline.visible = false
	Signals.emit_signal(\"timeshift\")
	in_future = false
	blink_anim.play(\"Unblink\")
	if !tut2:
		$Head/Camera3D/TutorialText2.queue_free()
		tut2 = true
	if !tut3:
		$Head/Camera3D/TutorialText3.visible = true
	$TimeshiftCD.start()

func _on_timeshift_cd_timeout():
	can_timeshift = true
	if !tut3:
		$Head/Camera3D/TutorialText3.queue_free()
		tut3 = true

func _on_pit_1_body_entered(body):
	if body is CharacterBody3D and body.is_inside_tree():
		body.global_transform.origin = Vector3(-16.656, 0.952, -4.69)
		body.global_transform.basis = Basis(Vector3(0, 1, 0), deg_to_rad(84.3))

func _on_pit_2_body_entered(body: Node3D) -> void:
	if body is CharacterBody3D and body.is_inside_tree():
		body.global_transform.origin = Vector3(-28.016, 0.66, 6.342)
		body.global_transform.basis = Basis(Vector3(0, 1, 0), deg_to_rad(176.3))
"

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_u5jka"]
radius = 0.22
height = 0.9

[sub_resource type="ShaderMaterial" id="ShaderMaterial_yr7rn"]
shader = ExtResource("3_0dms5")
shader_parameter/shake = 0.015
shader_parameter/noiseQuality = 250.0
shader_parameter/noiseIntensity = 0.001
shader_parameter/offsetIntensity = 0.05
shader_parameter/colorOffsetIntensity = 0.5

[sub_resource type="ShaderMaterial" id="ShaderMaterial_j00rk"]
render_priority = 0
shader = ExtResource("2_uy43f")
shader_parameter/depth_threshold = 0.05
shader_parameter/normal_threshold = 0.6
shader_parameter/darken_amount = 0.6
shader_parameter/lighten_amount = 1.5
shader_parameter/light_direction = Vector3(-0.96, -0.18, 0.2)

[sub_resource type="QuadMesh" id="QuadMesh_6xy0j"]
material = SubResource("ShaderMaterial_j00rk")
flip_faces = true
size = Vector2(2, 2)

[sub_resource type="Animation" id="Animation_xj8aj"]
resource_name = "Light"
length = 0.05
step = 0.01
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("SpotLight3D:visible")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.05),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [false, true]
}
tracks/1/type = "audio"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Light")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"clips": [{
"end_offset": 0.6536,
"start_offset": 0.1728,
"stream": ExtResource("5_ulfj6")
}],
"times": PackedFloat32Array(0)
}
tracks/1/use_blend = true

[sub_resource type="Animation" id="Animation_vqxum"]
resource_name = "Unlight"
length = 0.05
step = 0.01
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("SpotLight3D:visible")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.05),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [true, false]
}
tracks/1/type = "audio"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Light")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"clips": [{
"end_offset": 0.0,
"start_offset": 0.0,
"stream": ExtResource("5_ulfj6")
}],
"times": PackedFloat32Array(-0.17)
}
tracks/1/use_blend = true

[sub_resource type="AnimationLibrary" id="AnimationLibrary_g1yiu"]
_data = {
"Light": SubResource("Animation_xj8aj"),
"Unlight": SubResource("Animation_vqxum")
}

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_wc6dd"]
albedo_color = Color(0, 0, 0, 1)

[sub_resource type="PlaneMesh" id="PlaneMesh_e8w8h"]
material = SubResource("StandardMaterial3D_wc6dd")
size = Vector2(0.27, 0.12)

[sub_resource type="PlaneMesh" id="PlaneMesh_v6y8k"]
material = SubResource("StandardMaterial3D_wc6dd")
size = Vector2(0.27, 0.12)

[sub_resource type="Animation" id="Animation_0oeus"]
resource_name = "Blink"
length = 0.2
step = 0.01
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Head/Camera3D/BlinkTop:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [Vector3(0, 0.131218, -0.0655296), Vector3(0, 0.0592978, -0.0655296)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Head/Camera3D/BlinkBottom:position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.2),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [Vector3(0, -0.137559, -0.0655296), Vector3(0, -0.0596992, -0.0655296)]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("Head/Camera3D/BlinkTop:visible")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0, 0.01),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [false, true]
}
tracks/3/type = "value"
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/path = NodePath("Head/Camera3D/BlinkBottom:visible")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/keys = {
"times": PackedFloat32Array(0, 0.01),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [false, true]
}

[sub_resource type="Animation" id="Animation_538xn"]
resource_name = "Unblink"
length = 0.2
step = 0.01
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Head/Camera3D/BlinkTop:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [Vector3(0, 0.0592978, -0.0655296), Vector3(0, 0.131218, -0.0655296)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Head/Camera3D/BlinkBottom:position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.2),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [Vector3(0, -0.0596992, -0.0655296), Vector3(0, -0.137559, -0.0655296)]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("Head/Camera3D/BlinkTop:visible")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0, 0.2),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [true, false]
}
tracks/3/type = "value"
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/path = NodePath("Head/Camera3D/BlinkBottom:visible")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/keys = {
"times": PackedFloat32Array(0, 0.2),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [true, false]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_hw0to"]
_data = {
"Blink": SubResource("Animation_0oeus"),
"Unblink": SubResource("Animation_538xn")
}

[node name="Player" type="CharacterBody3D"]
collision_layer = 2
collision_mask = 3
script = SubResource("GDScript_847hh")

[node name="Bean" type="CollisionShape3D" parent="."]
shape = SubResource("CapsuleShape3D_u5jka")

[node name="Head" type="Node3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.18578, 0)

[node name="Camera3D" type="Camera3D" parent="Head"]
cull_mask = 983035

[node name="VHSOutline" type="ColorRect" parent="Head/Camera3D"]
visible = false
material = SubResource("ShaderMaterial_yr7rn")
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="PixelOutline" type="MeshInstance3D" parent="Head/Camera3D"]
visible = false
mesh = SubResource("QuadMesh_6xy0j")

[node name="Light" type="Node3D" parent="Head/Camera3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.204771, -0.164592, -0.26738)

[node name="SpotLight3D" type="SpotLight3D" parent="Head/Camera3D/Light"]
spot_range = 8.117
spot_angle = 29.5254

[node name="Light" type="AudioStreamPlayer3D" parent="Head/Camera3D/Light"]

[node name="Lightanim" type="AnimationPlayer" parent="Head/Camera3D/Light"]
libraries = {
"": SubResource("AnimationLibrary_g1yiu")
}

[node name="BlinkTop" type="MeshInstance3D" parent="Head/Camera3D"]
transform = Transform3D(1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0.131218, -0.0655296)
visible = false
cast_shadow = 0
mesh = SubResource("PlaneMesh_e8w8h")

[node name="BlinkBottom" type="MeshInstance3D" parent="Head/Camera3D"]
transform = Transform3D(1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, -0.137559, -0.0655296)
visible = false
cast_shadow = 0
mesh = SubResource("PlaneMesh_v6y8k")

[node name="TutorialText" type="RichTextLabel" parent="Head/Camera3D"]
anchors_preset = 5
anchor_left = 0.5
anchor_right = 0.5
offset_left = -131.5
offset_right = 131.5
offset_bottom = 28.0
grow_horizontal = 2
size_flags_horizontal = 4
theme_override_font_sizes/normal_font_size = 15
text = "Press Q to jump backwards in time."

[node name="TutorialText2" type="RichTextLabel" parent="Head/Camera3D"]
visible = false
anchors_preset = 7
anchor_left = 0.5
anchor_top = 1.0
anchor_right = 0.5
anchor_bottom = 1.0
offset_left = -169.0
offset_top = -40.0
offset_right = 169.0
offset_bottom = -24.0
grow_horizontal = 2
grow_vertical = 0
size_flags_horizontal = 4
theme_override_font_sizes/normal_font_size = 10
text = "Switching between the present and the past lets you avoid obstacles."

[node name="TutorialText3" type="RichTextLabel" parent="Head/Camera3D"]
visible = false
anchors_preset = 7
anchor_left = 0.5
anchor_top = 1.0
anchor_right = 0.5
anchor_bottom = 1.0
offset_left = -235.0
offset_top = -18.0
offset_right = 235.0
grow_horizontal = 2
grow_vertical = 0
size_flags_horizontal = 4
theme_override_font_sizes/normal_font_size = 10
text = "You can only stay in the past for 3 seconds before you return back to the future so make it count."

[node name="Blinkanim" type="AnimationPlayer" parent="."]
libraries = {
"": SubResource("AnimationLibrary_hw0to")
}

[node name="FootstepManager" type="Node3D" parent="." node_paths=PackedStringArray("ground_pos")]
script = ExtResource("8_toltb")
footstep_sounds = Array[AudioStreamMP3]([ExtResource("9_gx2bq")])
ground_pos = NodePath("../GroundPosition")

[node name="GroundPosition" type="Marker3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.45, 0)

[node name="Timeshift" type="Timer" parent="."]
wait_time = 3.0
one_shot = true

[node name="TimeshiftCD" type="Timer" parent="."]
wait_time = 2.0
one_shot = true

[connection signal="timeout" from="Timeshift" to="." method="_on_timeshift_timeout"]
[connection signal="timeout" from="TimeshiftCD" to="." method="_on_timeshift_cd_timeout"]
